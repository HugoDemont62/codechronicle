name: Discord Notification

on:
    push:
        branches:
            - main
        paths:
            - 'blog/**'
            - 'public/**'
    pull_request:
        types: [closed]
        paths:
            - 'blog/**'
            - 'public/**'

jobs:
    notify:
        runs-on: ubuntu-latest
        if: github.event.pull_request.merged == true || github.event_name == 'push'
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Get changed files
              id: changed-files
              uses: tj-actions/changed-files@v40
              with:
                  files: |
                      blog/**/*.md
                      public/**/*.html

            - name: Identify article information
              id: article-info
              if: steps.changed-files.outputs.any_changed == 'true'
              run: |
                  # Chercher les fichiers markdown modifi√©s
                  MD_FILES=$(echo "${{ steps.changed-files.outputs.added_files }}" | grep -E "blog/.*\.md" || echo "") 
                  
                  if [ -n "$MD_FILES" ]; then
                    # Prendre le premier fichier markdown trouv√©
                    MD_FILE=$(echo "$MD_FILES" | head -n 1)
                  
                    # Extraire le titre depuis le frontmatter YAML
                    ARTICLE_TITLE=$(grep -m 1 "title:" $MD_FILE | sed 's/title: *//' | tr -d "'" | tr -d '"')
                  
                    # Extraire le slug du nom de fichier
                    ARTICLE_FILENAME=$(basename "$MD_FILE")
                    ARTICLE_SLUG=$(echo "$ARTICLE_FILENAME" | sed -E 's/^[0-9]{4}-[0-9]{2}-[0-9]{2}-(.*)\.md$/\1/')
                  
                    # Construire l'URL de l'article
                    ARTICLE_URL="http://codechroniclehd.great-site.net/articles/${ARTICLE_SLUG}"
                  
                    # Stocker ces informations pour les √©tapes suivantes
                    echo "has_article=true" >> $GITHUB_OUTPUT
                    echo "article_title=$ARTICLE_TITLE" >> $GITHUB_OUTPUT
                    echo "article_slug=$ARTICLE_SLUG" >> $GITHUB_OUTPUT
                    echo "article_url=$ARTICLE_URL" >> $GITHUB_OUTPUT
                    echo "article_file=$MD_FILE" >> $GITHUB_OUTPUT
                  else
                    echo "has_article=false" >> $GITHUB_OUTPUT
                  fi

            # Ajoutons ici une √©tape de d√©ploiement FTP
            - name: Deploy to FTP
              if: github.event.pull_request.merged == true || github.event_name == 'push'
              uses: SamKirkland/FTP-Deploy-Action@v4.3.4
              with:
                  server: ${{ secrets.FTP_SERVER }}
                  username: ${{ secrets.FTP_USERNAME }}
                  password: ${{ secrets.FTP_PASSWORD }}
                  local-dir: ./public/
                  server-dir: ${{ secrets.FTP_SERVER_DIR || './' }}

            - name: Send notification for PR merge
              if: github.event.pull_request.merged == true && steps.article-info.outputs.has_article == 'true'
              run: |
                  PR_TITLE="${{ github.event.pull_request.title }}"
                  PR_NUMBER="${{ github.event.pull_request.number }}"
                  PR_URL="${{ github.event.pull_request.html_url }}"
                  ARTICLE_TITLE="${{ steps.article-info.outputs.article_title }}"
                  ARTICLE_URL="${{ steps.article-info.outputs.article_url }}"
                  
                  curl -X POST ${{ secrets.DISCORD_WEBHOOK_URL }} \
                    -H "Content-Type: application/json" \
                    -d '{
                      "content": "üéâ **PR #'"$PR_NUMBER"' fusionn√©e et site d√©ploy√©!**",
                      "embeds": [{
                        "title": "'"$ARTICLE_TITLE"'",
                        "description": "Le nouvel article est maintenant disponible sur le site.",
                        "url": "'"$ARTICLE_URL"'",
                        "color": 5814783,
                        "fields": [
                          {
                            "name": "Pull Request",
                            "value": "[#'"$PR_NUMBER"': '"$PR_TITLE"']('"$PR_URL"')",
                            "inline": true
                          },
                          {
                            "name": "Lire l'"'"'article",
                            "value": "[Voir sur le site]('"$ARTICLE_URL"')",
                            "inline": true
                          }
                        ],
                        "footer": {
                          "text": "CodeChronicle - Blog technique automatis√© par IA"
                        }
                      }],
                      "username": "CodeChronicle Bot"
                    }'

            - name: Send notification for direct push
              if: github.event_name == 'push' && steps.article-info.outputs.has_article == 'true'
              run: |
                  COMMIT_MSG="${{ github.event.head_commit.message }}"
                  COMMIT_URL="${{ github.event.head_commit.url }}"
                  ARTICLE_TITLE="${{ steps.article-info.outputs.article_title }}"
                  ARTICLE_URL="${{ steps.article-info.outputs.article_url }}"
                  
                  curl -X POST ${{ secrets.DISCORD_WEBHOOK_URL }} \
                    -H "Content-Type: application/json" \
                    -d '{
                      "content": "üì¢ **Nouveau commit sur main et site d√©ploy√©**",
                      "embeds": [{
                        "title": "'"$ARTICLE_TITLE"'",
                        "description": "'"$COMMIT_MSG"'",
                        "url": "'"$ARTICLE_URL"'",
                        "color": 3447003,
                        "fields": [
                          {
                            "name": "Commit",
                            "value": "[Voir le commit]('"$COMMIT_URL"')",
                            "inline": true
                          },
                          {
                            "name": "Lire l'"'"'article",
                            "value": "[Voir sur le site]('"$ARTICLE_URL"')",
                            "inline": true
                          }
                        ],
                        "footer": {
                          "text": "CodeChronicle - Blog technique automatis√© par IA"
                        }
                      }],
                      "username": "CodeChronicle Bot"
                    }'

            - name: Send simple notification if no article found
              if: (github.event.pull_request.merged == true || github.event_name == 'push') && steps.article-info.outputs.has_article != 'true' && steps.changed-files.outputs.any_changed == 'true'
              run: |
                  if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
                    # Notification pour une PR fusionn√©e
                    PR_TITLE="${{ github.event.pull_request.title }}"
                    PR_NUMBER="${{ github.event.pull_request.number }}"
                    PR_URL="${{ github.event.pull_request.html_url }}"
                  
                    DISCORD_MESSAGE="üéâ **PR #$PR_NUMBER fusionn√©e et site d√©ploy√©**: $PR_TITLE"
                    DISCORD_MESSAGE="$DISCORD_MESSAGE\nüìù [Voir la PR]($PR_URL)"
                  else
                    # Notification pour un push direct
                    COMMIT_MSG="${{ github.event.head_commit.message }}"
                    COMMIT_URL="${{ github.event.head_commit.url }}"
                  
                    DISCORD_MESSAGE="üì¢ **Nouveau commit sur main et site d√©ploy√©**: $COMMIT_MSG"
                    DISCORD_MESSAGE="$DISCORD_MESSAGE\nüìù [Voir le commit]($COMMIT_URL)"
                  fi
                  
                  # Ajouter les fichiers modifi√©s
                  if [ -n "${{ steps.changed-files.outputs.all_changed_files }}" ]; then
                    DISCORD_MESSAGE="$DISCORD_MESSAGE\nüîÑ Fichiers modifi√©s:"
                  
                    for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
                      DISCORD_MESSAGE="$DISCORD_MESSAGE\n- \`$file\`"
                    done
                  fi
                  
                  curl -X POST ${{ secrets.DISCORD_WEBHOOK_URL }} \
                    -H "Content-Type: application/json" \
                    -d "{\"content\": \"$DISCORD_MESSAGE\", \"username\": \"Gros sac orange\"}"
