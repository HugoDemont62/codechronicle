name: Generate Article

on:
    workflow_dispatch:
        inputs:
            topic:
                description: 'Sujet de l''article √† g√©n√©rer'
                required: true
                type: string
            tags:
                description: 'Tags de l''article (s√©par√©s par des virgules)'
                required: false
                type: string
                default: 'ia, technologie'

jobs:
    generate:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Generate article
              id: generate-article
              run: |
                  # G√©n√©rer l'article
                  node scripts/generate-article.js "${{ github.event.inputs.topic }}" "${{ github.event.inputs.tags }}"
                  
                  # Trouver le fichier g√©n√©r√© le plus r√©cent
                  LATEST_ARTICLE=$(find blog -type f -name "*.md" -printf "%T@ %p\n" | sort -nr | head -1 | cut -d' ' -f2-)
                  
                  # Extraire le titre depuis le frontmatter YAML
                  ARTICLE_TITLE=$(grep -m 1 "title:" $LATEST_ARTICLE | sed 's/title: *//' | tr -d "'" | tr -d '"')
                  
                  # Extraire le slug du nom de fichier
                  ARTICLE_FILENAME=$(basename "$LATEST_ARTICLE")
                  ARTICLE_SLUG=$(echo "$ARTICLE_FILENAME" | sed -E 's/^[0-9]{4}-[0-9]{2}-[0-9]{2}-(.*)\.md$/\1/')
                  
                  # Construire l'URL de l'article
                  ARTICLE_URL="http://codechroniclehd.great-site.net/articles/${ARTICLE_SLUG}.html"
                  
                  # Stocker ces informations pour les √©tapes suivantes
                  echo "article_title=$ARTICLE_TITLE" >> $GITHUB_OUTPUT
                  echo "article_path=$LATEST_ARTICLE" >> $GITHUB_OUTPUT
                  echo "article_slug=$ARTICLE_SLUG" >> $GITHUB_OUTPUT
                  echo "article_url=$ARTICLE_URL" >> $GITHUB_OUTPUT
              env:
                  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
                  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

            - name: Build site
              run: npm run build

            - name: Send additional Discord notification with URL
              if: env.DISCORD_WEBHOOK_URL != ''
              run: |
                  ARTICLE_TITLE="${{ steps.generate-article.outputs.article_title }}"
                  ARTICLE_URL="${{ steps.generate-article.outputs.article_url }}"
                  
                  curl -X POST ${{ secrets.DISCORD_WEBHOOK_URL }} \
                    -H "Content-Type: application/json" \
                    -d '{
                      "content": "üöÄ **Site mis √† jour !**",
                      "embeds": [{
                        "title": "'"$ARTICLE_TITLE"'",
                        "description": "L'"'"'article a √©t√© g√©n√©r√© et le site a √©t√© reconstruit.",
                        "color": 5814783,
                        "fields": [
                          {
                            "name": "Voir l'"'"'article",
                            "value": "'"$ARTICLE_URL"'",
                            "inline": false
                          }
                        ],
                        "footer": {
                          "text": "CodeChronicle - Blog technique automatis√© par IA"
                        }
                      }],
                      "username": "CodeChronicle Bot"
                    }'

            - name: Create Pull Request
              uses: peter-evans/create-pull-request@v5
              with:
                  token: ${{ secrets.PAT_GITHUB }}
                  commit-message: "feat: add article '${{ steps.generate-article.outputs.article_title }}'"
                  branch: "article/${{ github.run_id }}"
                  title: "‚ú® Nouvel article: ${{ steps.generate-article.outputs.article_title }}"
                  body: |
                      Cet article a √©t√© g√©n√©r√© automatiquement via le workflow GitHub Actions.
                      
                      **Sujet demand√©:** ${{ github.event.inputs.topic }}
                      **Titre final:** ${{ steps.generate-article.outputs.article_title }}
                      **Fichier:** ${{ steps.generate-article.outputs.article_path }}
                      **Tags:** ${{ github.event.inputs.tags }}
                      
                      üìù **[Lire l'article sur le site](${{ steps.generate-article.outputs.article_url }})**
                      
                      Veuillez v√©rifier le contenu et apporter les modifications n√©cessaires avant de fusionner.
                  labels: "article, automated"